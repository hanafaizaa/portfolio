library(readxl)
data <- read_excel("C:/Users/hanfai/portfolio/optimisasi statistika/timbulan sampah.xlsx")
data <- data[,-1]
summary(data)
library(DataExplorer)
plot_histogram(data = data, nrow = 2, ncol = 3, geom_histogram_args = list (fill="#D27685"))
par(mfrow=c(2,2))
boxplot(data$Sampah, xlab = "Timbulan Sampah", main = "")
boxplot(data$TPA, xlab = "Jumlah Tempat Pemrosesan Akhir", main = "")
boxplot(data$JP, xlab = "Jumlah Penduduk", main = "")
boxplot(data$PPKD, xlab = "Pengeluaran per Kapita Disesuaikan", main = "")
library(corrplot)
korel<-cor(data)
corrplot(korel, type ="upper", method="number")
dt.scale <- as.data.frame(scale(data))
reg <- lm(Sampah ~ ., data = dt.scale)
summary(reg)
library(car)
vif(reg)
ei = reg$residuals
n = dim(data)[1]
p = length(reg$coefficients)
hii <- hatvalues(reg)
ri <- rstandard(reg)
Obs = c(1:n)
summ <- cbind.data.frame(Obs, ei, hii, ri)
for (i in 1:dim(summ)[1]){
absri <- abs(summ[,4])
pencilan <- which(absri > 2)
}
pencilan
plot(reg,1)                # plot sisaan vs yduga
plot(reg,2)                # qq-plot
plot(x = 1:dim(dt.scale)[1],
y = reg$residuals,
type = 'b',
ylab = "Residuals",
xlab = "Observation")       # plot sisaan vs urutan
t.test(reg$residuals,
mu = 0,
conf.level = 0.95)
library(randtests)
runs.test(reg$residuals)
library(lmtest)
bptest(reg)
ks.test(reg$residuals, "pnorm", mean=mean(reg$residuals), sd=sd(reg$residuals))
uji_asumsi <- function(modelreg, autocol.test = c("runs", "dw", "bgodfrey"),
homos.test = c("bp", "glejser", "ncv"),
normal.test = c("ks", "shapiro.w", "jb"), taraf.nyata=0.05){
#Hipoteisis: H0: Asumsi terpenuhi vs H1: Asumsi tidak terpenuhi
sisaan <- modelreg$residuals
uji_t <- c()
autokol <- c()
homoskedastisitas <- c()
ks <- c()
p_value <- matrix(NA, ncol = 1, nrow = 4)
a <- t.test(sisaan,
mu = 0,
conf.level = 0.95)
p_value[1,1] <- round(a$p.value,3)
if(a$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
uji_t <- hasil
if (autocol.test == "runs"){
b <- randtests::runs.test(sisaan)
p_value[2,1] <- round(b$p.value,3)
if(b$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
autokol <- hasil
}else if (autocol.test == "dw") {
b <- lmtest::dwtest(modelreg)
p_value[2,1] <- round(b$p.value,3)
if(b$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
autokol <- hasil
}else if (autocol.test == "bgodfrey") {
b <- lmtest::bgtest(modelreg)
p_value[2,1] <- round(b$p.value,3)
if(b$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
autokol <- hasil
}
if (homos.test == "bp") {
c <- lmtest::bptest(modelreg)
p_value[3,1] <- round(c$p.value,3)
if(c$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
homoskedastisitas <- hasil
} else if (homos.test == "glejser") {
c <- skedastic::glejser(modelreg)
p_value[3,1] <- round(c$p.value,3)
if(c$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
homoskedastisitas <- hasil
} else if (homos.test == "ncv") {
c <- car::ncvTest(modelreg)
p_value[3,1] <- round(c$p,3)
if(c$p<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
homoskedastisitas <- hasil
}
if (normal.test == "ks"){
d <- ks.test(sisaan, "pnorm", mean=mean(sisaan), sd=sd(sisaan))
p_value[4,1] <- round(d$p.value,3)
if(d$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
ks <- hasil
} else if (normal.test == "shapiro.w") {
d <- shapiro.test(sisaan)
p_value[4,1] <- round(d$p.value,3)
if(d$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
ks <- hasil
} else if (normal.test == "jb") {
d <- tseries::jarque.bera.test(sisaan)
p_value[4,1] <- round(d$p.value,3)
if(d$p.value<taraf.nyata){hasil = "Tolak H0"}else{hasil="Tak Tolak H0"}
ks <- hasil
}
keputusan <- rbind(uji_t, autokol, homoskedastisitas, ks)
tabel <- data.frame(p_value, keputusan)
colnames(tabel) <- c("P-value", "Keputusan")
rownames(tabel) <- c("E(sisaan) = 0", "Non-autokorelasi", "Homoskedastisitas",
"Normality")
duga <- plot(modelreg,1)
kuantil <- plot(modelreg,2)
urutan <- plot(x = 1:length(sisaan),
y = sisaan,
type = 'b',
ylab = "Residuals",
xlab = "Observation")
print(tabel, duga, kuantil, urutan)
}
uji_asumsi(modelreg=reg, normal.test = "ks", autocol.test = "runs",
homos.test = "bp")
spreadLevelPlot(reg)
lambda = 0.3683835
dt.scale$T_Box = (data$Sampah ^ lambda - 1)/lambda
reg2 = lm(T_Box ~ TPA + JP + PPKD, data = dt.scale)
summary(reg2)
uji_asumsi(modelreg=reg2, normal.test = "ks", autocol.test = "runs",
homos.test = "bp")
pred <- cbind(intercept = 1, TPA = dt.scale$TPA, JP = dt.scale$JP,
PPKD = dt.scale$PPKD)
head(pred)
resp <- dt.scale$T_Box
head(resp)
A <- t(pred) %*% pred #(X'X)
b <- t(pred) %*% resp #(X'y)
nrow <- nrow(A)
nrow
Ugmt.mtx <- cbind(A,b)
Ugmt.mtx
Ugmt.mtx[1,] <- Ugmt.mtx[1,]/Ugmt.mtx[1,1]
for (i in 2:nrow){
for (j in i:nrow) {
Ugmt.mtx[j, ] <- Ugmt.mtx[j, ] - Ugmt.mtx[i-1, ] * Ugmt.mtx[j, i-1]
}
Ugmt.mtx[i,] <- Ugmt.mtx[i,]/Ugmt.mtx[i,i]
}
# print ouput
Ugmt.mtx
dd <- read.csv("D:/untukga.csv")
dd <- read.csv("C:/Users/hanfai/portfolio/optimisasi statistika/untukga.csv")
