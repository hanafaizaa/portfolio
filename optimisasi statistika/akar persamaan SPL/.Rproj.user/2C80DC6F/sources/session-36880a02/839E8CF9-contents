#Gauss Elimination

gauss_elimination <- function(A, b) {
  n <- length(b)
  for (k in 1:(n - 1)) {
    for (i in (k + 1):n) {
      factor <- A[i, k] / A[k, k]
      for (j in (k + 1):n) {
        A[i, j] <- A[i, j] - factor * A[k, j]
      }
      b[i] <- b[i] - factor * b[k]
    }
  }
  x <- rep(0, n)
  for (i in n:1) {
    x[i] <- (b[i] - sum(A[i, (i + 1):n] * x[(i + 1):n])) / A[i, i]
  }
  return (x)
}

gauss_elimination(A,b)


# Function to perform Gaussian elimination
gaussElimination <- function(A, b) {
  n <- length(b)
  for (k in 1:(n-1)) {
    for (i in (k+1):n) {
      factor <- A[i, k] / A[k, k]
      A[i, k] <- 0
      for (j in (k+1):n) {
        A[i, j] <- A[i, j] - factor * A[k, j]
      }
      b[i] <- b[i] - factor * b[k]
    }
  }
  x <- rep(0, n)
  for (i in n:1) {
    x[i] <- (b[i] - sum(A[i, (i+1):n] * x[(i+1):n])) / A[i, i]
  }
  return(x)
}

# Example usage
A <- matrix(c(4, -2, 1, -2, 4, -2, 1, -2, 4), nrow = 3, ncol = 3)
b <- c(1, 2, 3)
x <- gaussElimination(A,b)
print(x)

# Gauss Elimination Method
solve_linear_system <- function(A, b) {
  n <- length(b)
  for (k in 1:(n-1)) {
    for (i in (k+1):n) {
      m <- A[i, k] / A[k, k]
      A[i, k:(n)] <- A[i, k:(n)] - m * A[k, k:(n)]
      b[i] <- b[i] - m * b[k]
    }
  }
  x <- numeric(n)
  for (i in n:1) {
    x[i] <- (b[i] - sum(A[i, (i+1):n] * x[(i+1):n])) / A[i, i]
  }
  return(x)
}

# Example usage
A <- matrix(c(2, 1, 1, 3, 4, -1, -1, 1, 2), nrow = 3, ncol = 3, byrow = TRUE)
b <- c(8, 9, -3)
solve_linear_system(A,b)


gauss_elimination <- function(A, b) {
  n <- length(b)
  
  # Gaussian elimination
  for i in 1:(n - 1) {
    for j in (i + 1):n {
      m <- A[j, i] / A[i, i]
      A[j, ] <- A[j, ] - m * A[i, ]
      b[j] <- b[j] - m * b[i]
    }
  }
  
  # Back substitution
  x <- numeric(n)
  for i in (n):1 {
    x[i] <- (b[i] - sum(A[i, ] * x)) / A[i, i]
  }
  
  return(x)
}


